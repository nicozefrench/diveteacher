#!/bin/bash
# Script pour nettoyer compl√®tement Neo4j via le backend Docker

echo "============================================================"
echo "üßπ NETTOYAGE COMPLET NEO4J + GRAPHITI"
echo "============================================================"
echo ""

# V√©rifier que Docker est en cours d'ex√©cution
if ! docker ps | grep -q rag-backend; then
    echo "‚ùå Le conteneur backend n'est pas en cours d'ex√©cution"
    echo "üí° Lancez d'abord: docker compose -f docker/docker-compose.dev.yml up -d backend"
    exit 1
fi

echo "üìã √âtape 1: V√©rification de l'√©tat actuel..."
echo ""

# Cr√©er un script Python temporaire dans le conteneur
docker exec rag-backend python3 << 'PYTHON_SCRIPT'
from neo4j import GraphDatabase
from app.core.config import settings

print("üîç Connexion √† Neo4j...")
print(f"üìç URI: {settings.NEO4J_URI}")
print(f"üë§ User: {settings.NEO4J_USER}")
print("")

driver = GraphDatabase.driver(
    settings.NEO4J_URI,
    auth=(settings.NEO4J_USER, settings.NEO4J_PASSWORD)
)

try:
    with driver.session(database=settings.NEO4J_DATABASE) as session:
        # 1. Compter les n≈ìuds avant
        result = session.run("MATCH (n) RETURN count(n) as count")
        count_before = result.single()["count"]
        print(f"üìä N≈ìuds avant nettoyage: {count_before}")
        
        if count_before == 0:
            print("")
            print("‚úÖ La base est d√©j√† vide!")
            exit(0)
        
        # 2. Afficher les types de n≈ìuds
        result = session.run("""
            MATCH (n)
            RETURN DISTINCT labels(n) as labels, count(n) as count
            ORDER BY count DESC
        """)
        print("")
        print("üìã Types de n≈ìuds pr√©sents:")
        for record in result:
            labels = record["labels"]
            count = record["count"]
            print(f"   - {labels}: {count} n≈ìuds")
        
        # 3. Afficher quelques relations
        result = session.run("""
            MATCH ()-[r]->()
            RETURN type(r) as type, count(r) as count
            ORDER BY count DESC
            LIMIT 5
        """)
        relations = list(result)
        if relations:
            print("")
            print("üìã Types de relations pr√©sentes:")
            for record in relations:
                rel_type = record["type"]
                count = record["count"]
                print(f"   - {rel_type}: {count} relations")
        
        print("")
        print("=" * 60)
        print("üóëÔ∏è  D√âBUT DU NETTOYAGE")
        print("=" * 60)
        print("")
        
        # 4. Supprimer tous les n≈ìuds et relations
        print("üóëÔ∏è  Suppression de tous les n≈ìuds et relations...")
        session.run("MATCH (n) DETACH DELETE n")
        print("   ‚úÖ Tous les n≈ìuds et relations supprim√©s")
        
        # 5. Supprimer les contraintes
        print("")
        print("üóëÔ∏è  Suppression des contraintes...")
        result = session.run("SHOW CONSTRAINTS")
        constraints = list(result)
        if constraints:
            for record in constraints:
                constraint_name = record["name"]
                print(f"   - Suppression: {constraint_name}")
                try:
                    session.run(f"DROP CONSTRAINT {constraint_name} IF EXISTS")
                except Exception as e:
                    print(f"     ‚ö†Ô∏è  Avertissement: {e}")
        else:
            print("   ‚úÖ Aucune contrainte √† supprimer")
        
        # 6. Supprimer les index
        print("")
        print("üóëÔ∏è  Suppression des index...")
        result = session.run("SHOW INDEXES")
        indexes = list(result)
        constraint_names = [c["name"] for c in constraints]
        if indexes:
            for record in indexes:
                index_name = record["name"]
                # Ne pas supprimer les index li√©s aux contraintes
                if index_name not in constraint_names:
                    print(f"   - Suppression: {index_name}")
                    try:
                        session.run(f"DROP INDEX {index_name} IF EXISTS")
                    except Exception as e:
                        print(f"     ‚ö†Ô∏è  Avertissement: {e}")
        else:
            print("   ‚úÖ Aucun index √† supprimer")
        
        # 7. V√©rifier que tout est vide
        print("")
        print("=" * 60)
        print("üìä V√âRIFICATION FINALE")
        print("=" * 60)
        print("")
        
        result = session.run("MATCH (n) RETURN count(n) as count")
        count_after = result.single()["count"]
        
        result = session.run("MATCH ()-[r]->() RETURN count(r) as count")
        relations_after = result.single()["count"]
        
        print(f"üìä N≈ìuds apr√®s nettoyage: {count_after}")
        print(f"üìä Relations apr√®s nettoyage: {relations_after}")
        print("")
        
        if count_after == 0 and relations_after == 0:
            print("=" * 60)
            print("‚úÖ NEO4J EST MAINTENANT COMPL√àTEMENT VIDE!")
            print("‚úÖ PR√äT POUR DE NOUVEAUX TESTS!")
            print("=" * 60)
        else:
            print("=" * 60)
            print(f"‚ö†Ô∏è  Attention: {count_after} n≈ìuds et {relations_after} relations restants")
            print("=" * 60)
            
finally:
    driver.close()

PYTHON_SCRIPT

EXIT_CODE=$?

echo ""
echo "============================================================"
if [ $EXIT_CODE -eq 0 ]; then
    echo "‚úÖ NETTOYAGE TERMIN√â AVEC SUCC√àS!"
else
    echo "‚ùå ERREUR PENDANT LE NETTOYAGE (code: $EXIT_CODE)"
fi
echo "============================================================"

exit $EXIT_CODE

